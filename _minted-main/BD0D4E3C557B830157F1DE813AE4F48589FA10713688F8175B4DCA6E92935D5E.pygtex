\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}pragma once}

\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}Driver.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}etl/map.h\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}etl/array.h\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}etl/String.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}Frame.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}Logger\PYGZus{}Definitions.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}Message.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}Peripheral\PYGZus{}Definitions.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}AcubeSATParameters.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}TPMessage.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}Definitions.hpp\PYGZdq{}}

\PYG{k}{namespace}\PYG{+w}{ }\PYG{n+nn}{CAN}\PYG{o}{::}\PYG{n+nn}{Application}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Entity that maps subsystem names to strings for use in logging functions.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kr}{inline}\PYG{+w}{ }\PYG{n}{etl}\PYG{o}{::}\PYG{n}{map}\PYG{o}{\PYGZlt{}}\PYG{n}{NodeIDs}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{String}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{n}{LogSource}\PYG{o}{::}\PYG{n}{MaximumLettersInSubsystemName}\PYG{o}{\PYGZgt{}}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{LogSource}\PYG{o}{::}\PYG{n}{NumberOfLogSources}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{nodeIdToString}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}\PYG{n}{OBC}\PYG{p}{,}\PYG{+w}{         }\PYG{l+s}{\PYGZdq{}OBC\PYGZdq{}}\PYG{p}{\PYGZcb{},}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}\PYG{n}{COMMS}\PYG{p}{,}\PYG{+w}{       }\PYG{l+s}{\PYGZdq{}COMMS\PYGZdq{}}\PYG{p}{\PYGZcb{},}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}\PYG{n}{ADCS}\PYG{p}{,}\PYG{+w}{        }\PYG{l+s}{\PYGZdq{}ADCS\PYGZdq{}}\PYG{p}{\PYGZcb{},}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}\PYG{n}{SU}\PYG{p}{,}\PYG{+w}{          }\PYG{l+s}{\PYGZdq{}SU\PYGZdq{}}\PYG{p}{\PYGZcb{},}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}\PYG{n}{ExternalMCU}\PYG{p}{,}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}External\PYGZdq{}}\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{};}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * CAN\PYGZhy{}TP message IDs, as specified in DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k}{enum}\PYG{+w}{ }\PYG{n+nc}{MessageIDs}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{uint16\PYGZus{}t}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{SendParameters}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x01}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{RequestParameters}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x02}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{PerformFunction}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x03}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{EventReport}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x10}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{TMPacket}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x20}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{TCPacket}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x21}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{CCSDSPacket}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x022}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{Ping}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x30}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{Pong}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x31}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{LogMessage}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x40}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{UTCTime}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x200}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{BusSwitchover}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x400}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{Heartbeat}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x700}
\PYG{+w}{    }\PYG{p}{\PYGZcb{};}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Toggles the active CAN Bus.}
\PYG{c+cm}{     * @param bus A default argument that uses the currentBus member variable if a value is not provided.}
\PYG{c+cm}{     * @return The ID of the bus to be switched to.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{n}{CAN}\PYG{o}{::}\PYG{n}{Driver}\PYG{o}{::}\PYG{n}{ActiveBus}\PYG{+w}{ }\PYG{n+nf}{switchBus}\PYG{p}{(}\PYG{n}{CAN}\PYG{o}{::}\PYG{n}{Driver}\PYG{o}{::}\PYG{n}{ActiveBus}\PYG{+w}{ }\PYG{n}{newBus}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * The available Event Report Types, for an Event Report CAN\PYGZhy{}TP Message.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k}{enum}\PYG{+w}{ }\PYG{n+nc}{EventReportType}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{uint8\PYGZus{}t}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{Informative}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x0}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{LowSeverity}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x1}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{MediumSeverity}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x2}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{HighSeverity}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mh}{0x3}
\PYG{+w}{    }\PYG{p}{\PYGZcb{};}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * The size in bytes for the function ID required in Perform Function Messages.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k}{static}\PYG{+w}{ }\PYG{k}{constexpr}\PYG{+w}{ }\PYG{k+kt}{uint8\PYGZus{}t}\PYG{+w}{ }\PYG{n}{FunctionIdSize}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{6}\PYG{p}{;}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Milliseconds per day.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kr}{inline}\PYG{+w}{ }\PYG{k}{constexpr}\PYG{+w}{ }\PYG{k+kt}{uint64\PYGZus{}t}\PYG{+w}{ }\PYG{n}{millisecondsPerDay}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{24}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{l+m+mi}{60}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{l+m+mi}{60}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{l+m+mi}{1000}\PYG{p}{;}


\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Removes the ID of the sender in an incoming CAN Message.}
\PYG{c+cm}{     * @param id The ID to be filtered.}
\PYG{c+cm}{     * @return The filtered ID.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kr}{inline}\PYG{+w}{ }\PYG{k+kt}{uint32\PYGZus{}t}\PYG{+w}{ }\PYG{n+nf}{filterMessageID}\PYG{p}{(}\PYG{k+kt}{uint32\PYGZus{}t}\PYG{+w}{ }\PYG{n}{id}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{id}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{+w}{ }\PYG{l+m+mh}{0x700}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Adds a Ping message to the outgoing queue, according to DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{sendPingMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Adds a Pong message to the outgoing queue, to be sent in response to a Ping message, according to DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{sendPongMessage}\PYG{p}{();}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Adds a Heartbeat message to the outgoing queue, to be called periodically, according to DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{sendHeartbeatMessage}\PYG{p}{();}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Creates a CAN Bus switchover message to be sent whenever the FDIR responsible determines the bus quality}
\PYG{c+cm}{     * is not satisfactory, according to DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{sendBusSwitchoverMessage}\PYG{p}{();}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Adds a message to the outgoing queue with the current UTC Time, according to DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{sendUTCTimeMessage}\PYG{p}{();}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Sends a Send Parameters CAN\PYGZhy{}TP Message as described in DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param parameterIDs The IDs of the parameters to be sent.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{createSendParametersMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}
\PYG{+w}{                                     }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{etl}\PYG{o}{::}\PYG{n}{array}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{TPMessageMaximumArguments}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{parameterIDs}\PYG{p}{,}
\PYG{+w}{                                     }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Sends a Request Parameters CAN\PYGZhy{}TP Message as described in DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param parameterIDs The IDs of the parameters to be requested.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{createRequestParametersMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}
\PYG{+w}{                                        }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{etl}\PYG{o}{::}\PYG{n}{array}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{TPMessageMaximumArguments}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{parameterIDs}\PYG{p}{,}
\PYG{+w}{                                        }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Sends a Request Parameters CAN\PYGZhy{}TP Message as described in DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param functionId The ID of the function to be called.}
\PYG{c+cm}{     * @param arguments The map containing the arguments of the function to be called.}
\PYG{c+cm}{     * @TODO This map should be changed to accommodate arguments of differing types, not just uint64\PYGZus{}t}
\PYG{c+cm}{     * */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{createPerformFunctionMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}
\PYG{+w}{                                      }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{etl}\PYG{o}{::}\PYG{n}{string}\PYG{o}{\PYGZlt{}}\PYG{n}{FunctionIdSize}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{functionId}\PYG{p}{,}
\PYG{+w}{                                      }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{etl}\PYG{o}{::}\PYG{n}{map}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint8\PYGZus{}t}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{uint64\PYGZus{}t}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{TPMessageMaximumArguments}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{arguments}\PYG{p}{,}
\PYG{+w}{                                      }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Sends a Event Report CAN\PYGZhy{}TP Message as described in DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param type The event report type.}
\PYG{c+cm}{     * @param eventID The ID of the event.}
\PYG{c+cm}{     * @param payload An array of the event data.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{createEventReportMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{EventReportType}\PYG{+w}{ }\PYG{n}{type}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{uint16\PYGZus{}t}\PYG{+w}{ }\PYG{n}{eventID}\PYG{p}{,}
\PYG{+w}{                                  }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{Message}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{eventData}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Creates an ECSS\PYGZhy{}E\PYGZhy{}ST\PYGZhy{}70\PYGZhy{}41C Services TM/TC packet to be sent. After creation the packet is split into CAN\PYGZhy{}TP}
\PYG{c+cm}{     * Protocol frames to be transmitted.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param message An ECSS Message.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{createPacketMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}\PYG{+w}{ }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{etl}\PYG{o}{::}\PYG{n}{string}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{128}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{incomingMessage}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{Message}\PYG{o}{::}\PYG{n}{PacketType}\PYG{+w}{ }\PYG{n}{packetType}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Creates a CCSDS packet to be sent. After creation the packet is split into CAN\PYGZhy{}TP}
\PYG{c+cm}{     * Protocol frames to be transmitted.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param message An ECSS Message.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}
\PYG{+w}{    }\PYG{n+nf}{createCCSDSPacketMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}\PYG{+w}{ }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{Message}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{message}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Sends a Log CAN\PYGZhy{}TP Message as described in DDJF\PYGZus{}OBDH.}
\PYG{c+cm}{     * @param destinationAddress The ID of the destination node.}
\PYG{c+cm}{     * @param isMulticast Whether the message is to be sent to a multicast group.}
\PYG{c+cm}{     * @param log A LogEntry to be sent.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{createLogMessage}\PYG{p}{(}\PYG{n}{NodeIDs}\PYG{+w}{ }\PYG{n}{destinationAddress}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isMulticast}\PYG{p}{,}\PYG{+w}{ }\PYG{k}{const}\PYG{+w}{ }\PYG{n}{String}\PYG{o}{\PYGZlt{}}\PYG{n}{ECSSMaxMessageSize}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{log}\PYG{p}{,}
\PYG{+w}{                          }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{isISR}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Parses an incoming non\PYGZhy{}TP frame for the appropriate response.}
\PYG{c+cm}{     * @param message The incoming CAN::Frame.}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{parseMessage}\PYG{p}{(}\PYG{k}{const}\PYG{+w}{ }\PYG{n}{CAN}\PYG{o}{::}\PYG{n}{Frame}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{message}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Parses an incoming Send Parameters Message and updates the according parameters}
\PYG{c+cm}{     * @param message An incoming TPMessage}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{parseSendParametersMessage}\PYG{p}{(}\PYG{n}{TPMessage}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{message}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Parses an incoming Request Parameters Message and sends the according parameters back, if they exist.}
\PYG{c+cm}{     * @param message An incoming TPMessage}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{parseRequestParametersMessage}\PYG{p}{(}\PYG{n}{TPMessage}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{message}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Parses an incoming TM Packet and logs it.}
\PYG{c+cm}{     * @param message An incoming TMPacket}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{parseTMMessage}\PYG{p}{(}\PYG{n}{TPMessage}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{message}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+cm}{/**}
\PYG{c+cm}{     * Parses an incoming TC Packet and executes it.}
\PYG{c+cm}{     * @param message An incoming TCPacket}
\PYG{c+cm}{     */}
\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{parseTCMessage}\PYG{p}{(}\PYG{n}{TPMessage}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{message}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
